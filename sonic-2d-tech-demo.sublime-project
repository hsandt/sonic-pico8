{
	"build_systems":
	[
		{
			"name": "Dev: analyze engine scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.analyze intermediate/release/pico-boots"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: analyze game scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.analyze intermediate/release/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: generate dependency graph",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.generate_dependency_graph log/dependency_graph.dot src pico-boots/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: generate ordered require file for unity build (for testing)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["python3 -m pico-boots.scripts.generate_ordered_require_file log/ordered_require.lua main_ingame src pico-boots/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: setup",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./setup.sh"],
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: edit built-in data: titlemenu",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_titlemenu && pico8 -run data/builtin_data_titlemenu.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit built-in data: ingame",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_collision_masks && pico8 -run data/builtin_data_ingame.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit built-in data: stage_intro",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_collision_masks && pico8 -run data/builtin_data_stage_intro.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit built-in data: stage_clear",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_clear && pico8 -run data/builtin_data_stage_clear.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data: stage1 intro",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_intro && pico8 -run data/data_stage1_intro.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data: stage1 ingame",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_ingame && pico8 -run data/data_stage1_ingame.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data: stage sonic",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_stage_sonic && pico8 -run data/data_stage_sonic.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data (gfx only): start cinematic",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_titlemenu_start_cinematic && pico8 -run data/gfx_start_cinematic.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data (gfx only): splash screen",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh spritesheet_titlemenu_splash_screen && pico8 -run data/gfx_splash_screen.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data (gfx only): custom font",
			"shell": true,
			"cmd": ["./copy_spritesheet_for_import.sh picosonic_custom_font && pico8 -run data/builtin_data_generate_font_snippet.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit data: stage1 regions",
			"shell": true,
			"working_dir": "${project_path}",
			"variants":
			[
				{
					"name": "00",
					"cmd": ["pico8 -run data/data_stage1_00.p8"],
				},
				{
					"name": "01",
					"cmd": ["pico8 -run data/data_stage1_01.p8"],
				},
				{
					"name": "10",
					"cmd": ["pico8 -run data/data_stage1_10.p8"],
				},
				{
					"name": "11",
					"cmd": ["pico8 -run data/data_stage1_11.p8"],
				},
				{
					"name": "20",
					"cmd": ["pico8 -run data/data_stage1_20.p8"],
				},
				{
					"name": "21",
					"cmd": ["pico8 -run data/data_stage1_21.p8"],
				},
				{
					"name": "30",
					"cmd": ["pico8 -run data/data_stage1_30.p8"],
				},
				{
					"name": "31",
					"cmd": ["pico8 -run data/data_stage1_31.p8"],
				},
			]
		},
		{
			"name": "Game: edit metadata",
			"shell": true,
			"cmd": ["./edit_metadata.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: build cartridge titlemenu",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu cheat"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu assert"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu release"],
				}
			]
		},
		{
			"name": "Game: build cartridge ingame",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame cheat"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame tuner"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame cheat-ultrafast"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame assert"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame profiler"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame release"]
				}
			]
		},
		{
			"name": "Game: build cartridge attract_mode",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode debug"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode tuner"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode assert"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode profiler"]
				},
				{
					"name": "recorder",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode recorder"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode release"]
				}
			]
		},
		{
			"name": "Game: build cartridge stage_intro",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro cheat"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro assert"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro profiler"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro release"]
				}
			]
		},
		{
			"name": "Game: build cartridge stage_clear",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear cheat"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear assert"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear release"]
				}
			]
		},
		{
			"name": "Game: build cartridge sandbox",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh sandbox sandbox"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build full game",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_all_cartridges.sh debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_all_cartridges.sh debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_all_cartridges.sh cheat"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_all_cartridges.sh release"]
				}
			]
		},
		{
			"name": "Game: build itests titlemenu",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu itest --itest"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build itests ingame",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame itest --itest"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build itests stage_intro",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro itest --itest"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build itests stage_clear",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear itest --itest"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build pico8 utests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_pico8_utests.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and run titlemenu",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu debug)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu cheat && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu cheat)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu assert)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu tuner)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu release)"]
				},
			]
		},
		{
			"name": "Game: build and run ingame",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame debug)"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame debug-ultrafast && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame debug-ultrafast)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame cheat && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame cheat)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame tuner)"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame ultrafast && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame ultrafast)"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame cheat-ultrafast && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame cheat-ultrafast)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame assert)"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame profiler && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame profiler)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame release)"]
				},
			]
		},
		{
			"name": "Game: build and run attract_mode",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode debug)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode tuner)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode assert)"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode profiler && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode profiler)"]
				},
				{
					"name": "recorder",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode recorder && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode recorder)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh attract_mode release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh attract_mode release)"]
				},
			]
		},
		{
			"name": "Game: build and run stage_intro",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro debug)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro cheat && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro cheat)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro tuner)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro assert)"]
				},
				{
					"name": "profiler",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro profiler && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro profiler)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro release)"]
				},
			]
		},
		{
			"name": "Game: build and run stage_clear",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear debug)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear cheat && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear cheat)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear assert)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear tuner)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear release)"]
				},
			]
		},
		{
			"name": "Game: build and run generate_font_snippet",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh generate_font_snippet assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh generate_font_snippet assert)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and run generate_gfx_sage_choir_pcm_data (headless)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh generate_gfx_sage_choir_pcm_data assert && ./run_cartridge.sh generate_gfx_sage_choir_pcm_data assert -x"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and run sandbox",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh sandbox sandbox && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh sandbox sandbox)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and run full game",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_all_cartridges.sh debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_and_install_all_cartridges.sh debug && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu debug)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_and_install_all_cartridges.sh cheat && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu cheat)"]
				},
				{
					"name": "assert",
					"cmd": ["./build_and_install_all_cartridges.sh assert && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu assert)"]
				},
				{
					"name": "tuner",
					"cmd": ["./build_and_install_all_cartridges.sh tuner && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu tuner)"]
				},
				{
					"name": "release",
					"cmd": ["./build_and_install_all_cartridges.sh release && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu release)"]
				},
			]
		},
		{
			"name": "Game: build and run itests titlemenu",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh titlemenu itest --itest && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh titlemenu itest --itest)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build and run itests ingame",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh ingame itest --itest && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh ingame itest --itest)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build and run itests stage_intro",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_intro itest --itest && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_intro itest --itest)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build and run itests stage_clear",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_single_cartridge_with_data.sh stage_clear itest --itest && (./pico-boots/scripts/reload.sh || ./run_cartridge.sh stage_clear itest --itest)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
		},
		{
			"name": "Game: build and run pico8 utests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_pico8_utests.sh && (./pico-boots/scripts/reload.sh || ./run_pico8_utests.sh)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: start",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./run_cartridge.sh ingame debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "ingame debug",
					"cmd": ["./run_cartridge.sh ingame debug"]
				},
				{
					"name": "ingame debug-ultrafast",
					"cmd": ["./run_cartridge.sh ingame debug-ultrafast"]
				},
				{
					"name": "ingame cheat",
					"cmd": ["./run_cartridge.sh ingame cheat"]
				},
				{
					"name": "ingame tuner",
					"cmd": ["./run_cartridge.sh ingame tuner"]
				},
				{
					"name": "ingame ultrafast",
					"cmd": ["./run_cartridge.sh ingame ultrafast"]
				},
				{
					"name": "ingame cheat-ultrafast",
					"cmd": ["./run_cartridge.sh ingame cheat-ultrafast"]
				},
				{
					"name": "ingame assert",
					"cmd": ["./run_cartridge.sh ingame assert"]
				},
				{
					"name": "ingame profiler",
					"cmd": ["./run_cartridge.sh ingame profiler"]
				},
				{
					"name": "ingame release",
					"cmd": ["./run_cartridge.sh ingame release"]
				},
				{
					"name": "attract_mode debug",
					"cmd": ["./run_cartridge.sh attract_mode debug"]
				},
				{
					"name": "attract_mode tuner",
					"cmd": ["./run_cartridge.sh attract_mode tuner"]
				},
				{
					"name": "attract_mode assert",
					"cmd": ["./run_cartridge.sh attract_mode assert"]
				},
				{
					"name": "attract_mode profiler",
					"cmd": ["./run_cartridge.sh attract_mode profiler"]
				},
				{
					"name": "attract_mode recorder",
					"cmd": ["./run_cartridge.sh attract_mode recorder"]
				},
				{
					"name": "attract_mode release",
					"cmd": ["./run_cartridge.sh attract_mode release"]
				},
				{
					"name": "titlemenu debug",
					"cmd": ["./run_cartridge.sh titlemenu debug"]
				},
				{
					"name": "titlemenu cheat",
					"cmd": ["./run_cartridge.sh titlemenu cheat"]
				},
				{
					"name": "titlemenu assert",
					"cmd": ["./run_cartridge.sh titlemenu assert"]
				},
				{
					"name": "titlemenu release",
					"cmd": ["./run_cartridge.sh titlemenu release"]
				},
				{
					"name": "stage_intro debug",
					"cmd": ["./run_cartridge.sh stage_intro debug"]
				},
				{
					"name": "stage_intro cheat",
					"cmd": ["./run_cartridge.sh stage_intro cheat"]
				},
				{
					"name": "stage_intro tuner",
					"cmd": ["./run_cartridge.sh stage_intro tuner"]
				},
				{
					"name": "stage_intro assert",
					"cmd": ["./run_cartridge.sh stage_intro assert"]
				},
				{
					"name": "stage_intro profiler",
					"cmd": ["./run_cartridge.sh stage_intro profiler"]
				},
				{
					"name": "stage_intro release",
					"cmd": ["./run_cartridge.sh stage_intro release"]
				},
				{
					"name": "stage_clear debug",
					"cmd": ["./run_cartridge.sh stage_clear debug"]
				},
				{
					"name": "stage_clear cheat",
					"cmd": ["./run_cartridge.sh stage_clear cheat"]
				},
				{
					"name": "stage_clear assert",
					"cmd": ["./run_cartridge.sh stage_clear assert"]
				},
				{
					"name": "stage_clear tuner",
					"cmd": ["./run_cartridge.sh stage_clear tuner"]
				},
				{
					"name": "stage_clear release",
					"cmd": ["./run_cartridge.sh stage_clear release"]
				},
				{
					"name": "itests titlemenu",
					"cmd": ["./run_cartridge.sh titlemenu itest --itest"],
				},
				{
					"name": "itests ingame",
					"cmd": ["./run_cartridge.sh ingame itest --itest"],
				},
				{
					"name": "pico8 utests",
					"cmd": ["./run_pico8_utests.sh"],
				},
			]
		},
		{
			"name": "Game: install cartridge titlemenu (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh titlemenu debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_single_cartridge_with_data.sh titlemenu debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_single_cartridge_with_data.sh titlemenu cheat"]
				},
				{
					"name": "assert",
					"cmd": ["./install_single_cartridge_with_data.sh titlemenu assert"]
				},
				{
					"name": "release",
					"cmd": ["./install_single_cartridge_with_data.sh titlemenu release"]
				}
			]
		},
		{
			"name": "Game: install cartridge ingame (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh ingame debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_single_cartridge_with_data.sh ingame debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./install_single_cartridge_with_data.sh ingame debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_single_cartridge_with_data.sh ingame cheat"]
				},
				{
					"name": "tuner",
					"cmd": ["./install_single_cartridge_with_data.sh ingame tuner"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./install_single_cartridge_with_data.sh ingame ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./install_single_cartridge_with_data.sh ingame cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./install_single_cartridge_with_data.sh ingame sandbox"]
				},
				{
					"name": "assert",
					"cmd": ["./install_single_cartridge_with_data.sh ingame assert"]
				},
				{
					"name": "profiler",
					"cmd": ["./install_single_cartridge_with_data.sh ingame profiler"]
				},
				{
					"name": "release",
					"cmd": ["./install_single_cartridge_with_data.sh ingame release"]
				}
			]
		},
		{
			"name": "Game: install cartridge attract_mode (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh attract_mode debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode debug"]
				},
				{
					"name": "tuner",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode tuner"]
				},
				{
					"name": "assert",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode assert"]
				},
				{
					"name": "profiler",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode profiler"]
				},
				{
					"name": "recorder",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode recorder"]
				},
				{
					"name": "release",
					"cmd": ["./install_single_cartridge_with_data.sh attract_mode release"]
				}
			]
		},
		{
			"name": "Game: install cartridge stage_intro (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh stage_intro debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_single_cartridge_with_data.sh stage_intro debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_single_cartridge_with_data.sh stage_intro cheat"]
				},
				{
					"name": "release",
					"cmd": ["./install_single_cartridge_with_data.sh stage_intro release"]
				}
			]
		},
		{
			"name": "Game: install cartridge stage_clear (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh stage_clear debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_single_cartridge_with_data.sh stage_clear debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_single_cartridge_with_data.sh stage_clear cheat"]
				},
				{
					"name": "release",
					"cmd": ["./install_single_cartridge_with_data.sh stage_clear release"]
				}
			]
		},
		{
			"name": "Game: install cartridge sandbox (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_single_cartridge_with_data.sh sandbox sandbox"],
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: install all cartridges (with data)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_all_cartridges.sh debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_all_cartridges.sh debug"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_all_cartridges.sh cheat"]
				},
				{
					"name": "release",
					"cmd": ["./install_all_cartridges.sh release"]
				}
			]
		},
		{
			"name": "Game: export and patch cartridge release",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./export_and_patch_cartridge_release.sh"],
		},
		{
			"name": "Game: upload cartridge release",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./upload_cartridge_release.sh"],
		},
		{
			"name": "Game: build full game release, export and patch it, upload it",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_and_install_all_cartridges.sh release && ./export_and_patch_cartridge_release.sh && ./upload_cartridge_release.sh"],
		},
		{
			"name": "Game: test",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			"env": {
				// won't work on headless_itests_utest, please use headless_itests command
				"ITEST_CARTRIDGE_SUFFIX": "ignore"
			},
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"],
					"env": {
						// won't work on headless_itests_utest, please use headless_itests command
						"ITEST_CARTRIDGE_SUFFIX": "ignore"
					}
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"],
					"env": {
						// won't work on headless_itests_utest, please use headless_itests command
						"ITEST_CARTRIDGE_SUFFIX": "ignore"
					}
				},
				{
					"name": "*",
					"cmd": ["./test.sh"],
					"env": {
						// won't work on headless_itests_utest, please use headless_itests command
						"ITEST_CARTRIDGE_SUFFIX": "ignore"
					}
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"],
					"env": {
						// won't work on headless_itests_utest, please use headless_itests command
						"ITEST_CARTRIDGE_SUFFIX": "ignore"
					}
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"],
					"env": {
						// won't work on headless_itests_utest, please use headless_itests command
						"ITEST_CARTRIDGE_SUFFIX": "ignore"
					}
				},
				{
					"name": "application",
					"cmd": ["./test.sh application"],
				},
				{
					"name": "ingame",
					"cmd": ["./test.sh ingame"],
				},
				{
					"name": "stage_intro",
					"cmd": ["./test.sh stage_intro"],
				},
				{
					"name": "stage_clear",
					"cmd": ["./test.sh stage_clear"],
				},
				{
					"name": "itest",
					"cmd": ["./test.sh itest"],
				},
				{
					"name": "menu",
					"cmd": ["./test.sh menu"],
				},
				{
					"name": "platformer",
					"cmd": ["./test.sh platformer"],
				},
				{
					"name": "test_data",
					"cmd": ["./test.sh test_data"],
				},
				{
					"name": "headless_itests titlemenu",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu"
					}
				},
				{
					"name": "headless_itests titlemenu (coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu"
					}
				},
				{
					"name": "headless_itests titlemenu (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests titlemenu (render + coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests titlemenu - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu"
					}
				},
				{
					"name": "headless_itests titlemenu - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "titlemenu",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests ingame",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame"
					}
				},
				{
					"name": "headless_itests ingame (coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame"
					}
				},
				{
					"name": "headless_itests ingame (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests ingame (render + coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests ingame - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame"
					}
				},
				{
					"name": "headless_itests ingame - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "ingame",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests attract_mode",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode"
					}
				},
				{
					"name": "headless_itests attract_mode (coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode"
					}
				},
				{
					"name": "headless_itests attract_mode (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests attract_mode (render + coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests attract_mode - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode"
					}
				},
				{
					"name": "headless_itests attract_mode - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "attract_mode",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_intro",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro"
					}
				},
				{
					"name": "headless_itests stage_intro (coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro"
					}
				},
				{
					"name": "headless_itests stage_intro (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_intro (render + coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_intro - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro"
					}
				},
				{
					"name": "headless_itests stage_intro - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_intro",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_clear",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear"
					}
				},
				{
					"name": "headless_itests stage_clear (coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear"
					}
				},
				{
					"name": "headless_itests stage_clear (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_clear (render + coverage)",
					"cmd": ["./test.sh -C -f headless_itests"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear",
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests stage_clear - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear"
					}
				},
				{
					"name": "headless_itests stage_clear - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ITEST_CARTRIDGE_SUFFIX": "stage_clear",
						"ENABLE_RENDER": "1"
					}
				},
			]
		},
		{
			"name": "Engine: test",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				}
			]
		},
		{
			"name": "All: test",
			"working_dir": "${project_path}",
			"shell": true,
			// note that luacov report is generated in the working directory, so the second test report will overwrite the previous one
			"cmd": ["ITEST_CARTRIDGE_SUFFIX=ignore ./test.sh && echo '' && ITEST_CARTRIDGE_SUFFIX=titlemenu ./test.sh -f headless_itests && echo '' && ITEST_CARTRIDGE_SUFFIX=ingame ./test.sh -f headless_itests && echo '' && ITEST_CARTRIDGE_SUFFIX=stage_clear ./test.sh -f headless_itests && echo '' && ITEST_CARTRIDGE_SUFFIX=stage_intro ./test.sh -f headless_itests && echo '' && pico-boots/test.sh"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					// if you aim for 100% coverage including render methods for headless itests
					"name": "(render)",
					"env": {
						"ENABLE_RENDER": "1"
					}
				}
			]
		},
		{
			"name": "Engine: Prebuild: test preprocess",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_preprocess"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Prebuild: test replace_strings",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_replace_strings"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Prebuild: test generate_ordered_require_file",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_generate_ordered_require_file"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Prebuild: test add_require",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_require"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test minify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_minify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test unify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_unify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test add_metadata",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_metadata"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Export: test adapt_for_png",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_adapt_for_png"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Export: test patch_pico8_js",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_patch_pico8_js"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Tool: test offset bgm tracks",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_offset_bgm_tracks"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Doc: test generate_dependency_graph",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_generate_dependency_graph"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Doc: test analyze",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_analyze"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "lua: parse",
			"selector": "source.lua,source.p8",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["luac -p $file"],
			"file_regex": "((?:src|tests)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)"
		},
	],
	"folders":
	[
		{
			"folder_exclude_patterns":
			[
				"backup",
				"carts"
			],
			"path": "~/.lexaloffle/pico-8"
		},
		{
			"folder_exclude_patterns":
			[
				".git",
				"backup",
				"build",
				"intermediate"
			],
			"path": "."
		}
	],
	"syntax_override":
	{
		"\\.lua$":
		[
			"sublime-PICO-8/PICO-8"
		],
		"\\.luacov":
		[
			"Lua/Lua"
		]
	}
}
